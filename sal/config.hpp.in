#pragma once


/**
 * \file sal/config.hpp
 * SAL library building configuration.
 *
 * After inclusion, number of preprocessor symbols are defined that describe
 * building environment. Also provides constexpr variables for library version
 * and build type (Debug or Release).
 */

#include <cstddef>
#include <cstdint>
#include <string_view>


#define __sal_begin namespace sal { inline namespace v0 {
#define __sal_end   }} // namespace sal::v0


__sal_begin


namespace __bits {

using namespace std::string_view_literals;
constexpr const auto version = "@PROJECT_VERSION@"sv;

} // namespace __bits


/// SAL version
constexpr const std::string_view version = __bits::version;


//
// __sal_arch
//

#if defined(__i386__) \
  || defined(_M_IX86)
  #define __sal_arch_x86 1
#elif defined(__x86_64__) \
  || defined(_M_X64)
  #define __sal_arch_x86_64 1
#endif


//
// __sal_os
//

#if defined(__APPLE__)
  #define __sal_os_macos 1
#elif defined(__linux__)
  #define __sal_os_linux 1
#elif defined(_WIN32) \
  || defined(_WIN64)
  #define __sal_os_windows 1
#endif


//
// __sal_at
//

#define __sal_s(s) #s
#define __sal_t(s) __sal_s(s)
#define __sal_at __FILE__ ":" __sal_t(__LINE__)


//
// __sal_warning_suppress_XXX
//

#if _MSC_VER
  #define __sal_warning_suppress_aligned_struct_padding \
    __pragma(warning(suppress: 4324))
#else
  #define __sal_warning_suppress_aligned_struct_padding
#endif


__sal_end
